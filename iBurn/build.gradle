buildscript {
    repositories {
        mavenCentral()

        dependencies {

            // Add the Crashlytics Gradle plugin
            classpath 'com.google.firebase:firebase-crashlytics-gradle:2.9.8'

        }
        google()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'


repositories {
    mavenCentral()
}

ext {
    versionYear = 2023
}

android {
    buildFeatures {
        buildConfig = true
        viewBinding = true
    }
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 33
        versionCode 37
        versionName "$versionYear.0.0.1"

        applicationId "com.iburnapp.iburn3"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        archivesBaseName = "iburn-$versionName-$versionCode"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }
    }

    splits {
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86, armeabi-v7a, and mips.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "x86_64", "armeabi-v8a", "arm64-v8a", "armeabi-v7a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk true
        }
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/rxjava.properties', 'META-INF/rxjava.properties']
        }
    }


    signingConfigs {
        release {
            // We'll read release signingConfig's data from
            // gradle.properties in the project's root directory
        }
    }


    flavorDimensions "production"

    productFlavors {
        regular {
            buildConfigField "boolean", "MOCK", "false"
            dimension "production"
        }
        // Mock location and date data
        mock {
            buildConfigField "boolean", "MOCK", "true"
            dimension "production"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
            debuggable false
        }
        unsigned {
            minifyEnabled false
            signingConfig null
            debuggable false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    namespace 'com.gaiagps.iburn'

}

// Read Signing key from gradle.properties located in project root
if (project.hasProperty('storeFile')) {
    android.signingConfigs.release.storeFile = file(storeFile)
}
if (project.hasProperty('storePassword')) {
    android.signingConfigs.release.storePassword = storePassword
}
if (project.hasProperty('keyAlias')) {
    android.signingConfigs.release.keyAlias = keyAlias
}
if (project.hasProperty('keyPassword')) {
    android.signingConfigs.release.keyPassword = keyPassword
}

def PLAY_SERVICES_VERSION = "17.0.0"

dependencies {

    // Android Support libraries
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.recyclerview:recyclerview:1.3.1'
    implementation 'androidx.annotation:annotation:1.6.0'
    implementation 'androidx.dynamicanimation:dynamicanimation:1.0.0'
    implementation "androidx.work:work-runtime:2.8.1"

    // Google Play Services
    implementation "com.google.android.gms:play-services-gcm:$PLAY_SERVICES_VERSION"
    implementation "com.google.android.gms:play-services-location:21.0.1"

    // 3rd Party libraries
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.4.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
    implementation 'com.patloew.rxlocation:rxlocation:1.0.5'
    implementation 'com.tonicartos:superslim:0.4.13'
    implementation 'xyz.danoz:recyclerviewfastscroller:0.1.3'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.eclipsesource.j2v8:j2v8:4.8.5@aar'
    implementation 'org.maplibre.gl:android-sdk:10.2.0'
    implementation 'org.maplibre.gl:android-plugin-annotation-v9:1.0.0'

    implementation 'com.squareup.picasso:picasso:2.8'

    implementation 'com.github.permissions-dispatcher:permissionsdispatcher:4.9.2'
    kapt "com.github.permissions-dispatcher:permissionsdispatcher-processor:4.9.2"

    implementation 'com.google.firebase:firebase-crashlytics:18.4.0'
    implementation 'com.google.firebase:firebase-analytics:21.3.0'

    implementation 'androidx.room:room-rxjava2:2.5.2'
    implementation 'androidx.room:room-runtime:2.5.2'
    kapt 'androidx.room:room-compiler:2.5.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"


    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test:rules:1.5.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation 'androidx.annotation:annotation:1.6.0'

}

task updateData {
    // Copy items from an 'iBurn-Data' repo checked out into a
    // directory with that name adjacent to this repo's root 'iBurn-Android' directory.
    // Usage: `./gradlew :iBurn:updateData`

    // doLast ensures copying is only run when this task is
    // invoked by name, and not during general gradle configuration
    doLast {
        logger.info("Updating assets from IBurn-Data")
        // Reverse Geocoder
        copy {
            from "$projectDir/../../iBurn-Data/data/$versionYear/geocoder/"
            include 'bundle.js'
            into "$projectDir/src/main/assets/js/"
        }

        // Mapbox mbtiles
        copy {
            from "$projectDir/../../iBurn-Data/data/$versionYear/Map/"
            include 'map.mbtiles'
            into "$projectDir/src/main/assets/map/"
        }

        // Map styles
        copy {
            from "$projectDir/../../iBurn-Data/data/$versionYear/Map/styles/"
            include 'iburn-light.json'
            include 'iburn-dark.json'
            into "$projectDir/src/main/assets/map/"
            // Filter out map style templating. Mapbox provides an API
            // for attaching a source to styles, which I think is less fragile.
            filter { line ->
                !line.contains('"composite": {"url": "mbtiles://{{mbtiles_path}}", "type": "vector"') ? line : null
            }
        }

        // Art images
        copy {
            from "$projectDir/../../iBurn-Data/data/$versionYear/MediaFiles/"
            include '*.jpg'
            include '*.webp'
            into "$projectDir/src/main/assets/art_images/"
        }

        // Json
        copy {
            from "$projectDir/../../iBurn-Data/data/$versionYear/APIData/"
            include 'camp.json'
            include 'art.json'
            include 'event.json'
            into "$projectDir/src/main/assets/json/"
        }
    }
}
